Name: Hierarchy Tool
Author: Arseniy Arsentyew <programpro.ars@gmail.com>

Description: Hierarchy Tool is the python code that will help you better understand your project directory!

"Create mode" description: "create mode" will help you create your project directory hierarchy. 
It will be much faster than doing the same in your file manager.

"Manage mode" description: "manage mode" will help you better and faster reorganize your directory. 
It will be too easy with the Hierarchy Tool's bunch of machine commands and regular expressions!

"Library mode" description: You can use the Hierarchy Tool as a python library. 
It opens for you big opportunities such as quick searching within the work folder or customising Hierarchy Tool's regular expressions.
And you can use nice console animations of the Hierarchy Tool. -"-"-

Type: terminal (console) program or python library
Platform compatibility: Windows, Mac Os, Linux


#############
# Hierarchy #
#############

# Hierarchy Tool
#### Architecture.txt -> The file with full technical description

#### design -> The folder which contain all project's graphics
####### logo.ai -> The Adobe Illustrator source file
####### logo.png -> The PNG representation of the logo

#### source -> The folder which contains the main python script
####### Hierarchy Tool.py -> The main python script

#### doc -> The folder which contains all project documentation
####### LibruaryModeDoc.pdf -> The documentation of using the Hierarchy Tool as python libruary
####### CreateModeDoc.pdf -> The documentation of using the Hierarchy Tool for creating hierarchy
####### ManageModeDoc.pdf -> The documentation of using the Hierarchy Tool for manipulating user's hierarchy of the directory

#### installers -> The folder which contains the installers for all compatible platforms
####### Hierarchy Tool.exe -> The Windows installer
####### Hierarchy Tool.dmg -> The Mac Os installer
####### Hierarchy Tool.sh -> The Linux installer

#### .gitignore -> The gitignore file

#### LICENSE -> The license file

#### README.md -> The readme file

#### marketing -> The private folder which contains marketing information


#################
# ASCII preview #
#################
  _  _ _                     _        
 | || (_)___ _ _ __ _ _ _ __| |_ _  _ 
 | __ | / -_) '_/ _` | '_/ _| ' \ || |
 |_||_|_\___|_| \__,_|_| \__|_||_\_, |
 |_   _|__  ___| |               |__/ 
   | |/ _ \/ _ \ |                    
   |_|\___/\___/_|                    


##############################
# Commands for "Manage mode" #
##############################

# expression here is the regular expression that links the file or the folder name. For more information see the expression rules section
                                   
1. rename (rn) expression1 -> expression2    (This command rename all objects which match expression1 to expression2)
2. delete (dl) expression                    (This command delete all objects which match expression)
3. move (mv) expression1 -> new path          (This command move all objects which match expression1 to the new path)
4. create (cr) expression                    (This command create all objects which match expression)


##############################
# Commands for "Create mode" #
##############################

1. < (going inside the folder)
2. > (going to the folder's parent)


#########################
# Rules for expressions #
#########################

* -> match all characters
? -> match one character
[abc] -> match a or b or c
[!abc] -> match all characters but not a or b or c
{nums} -> match number range (e.g. file{nums}.txt will match file1.txt, file2.txt and so on)
{brackets_nums} -> match number range with brackets (e.g. file{brackets_nums}.txt will match file(1).txt, file(2).txt and so on)
{letters} -> match letters range (e.g. file_{letters}.txt will match file_a.txt, file_b.txt and so on)
{brackets_letters} -> match letters range with brackets (e.g. file_{brackets_letters}.txt will match file_(a).txt, file_(b).txt and so on)
{brackets_capital_letters} -> match capital letters range with brackets (e.g. file_{brackets_capital_letters}.txt will match file_(A).txt, file_(B).txt and so on)
{capital_letters} -> match capital letters range (e.g. file_{capital_letters}.txt will match file_A.txt, file_B.txt and so on)
{custom} -> match what you want (To specify this command see LibruaryModeDoc.pdf in the doc folder)